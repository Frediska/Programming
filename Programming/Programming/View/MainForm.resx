<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAKwoAACsKAAAAAAAAAAA
        AAAAAAD/AAAA/wAAAP4AAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAA
        APwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAA
        AP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAP8AAADtAAAAuAAAALwAAAC7AAAAuwAAALsAAAC7AAAAuwAA
        ALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAA
        ALsAAAC7AAAAvAAAALgAAADtAAAA/wAAAP4AAAD8AAAA/wAAALsAAAAAAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAALsAAAD/AAAA/AAAAPwAAAD/AAAAvAAAAAAAAAAFAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAUAAAAAAAAAvAAAAP8AAAD8AAAA/AAAAP8AAAC7AAAAAAAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAC5AAAA/wAAAPkAAAD8AAAA/wAA
        ALsAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAALwAAAD/AAAA/AAA
        APwAAAD/AAAAuwAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAADAAAAAwAAAAMAAAAAAAAAjgAA
        AMwAAAC/AAAA/AAAAP8AAAC7AAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAABAAAAAAAAAAAAAAD8AAAA/wAAALsAAAAAAAAAAgAAAAAAAAAAAAAAAQAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAwAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAIAAAAlAAAAQQAA
        ADcAAAARAAAAAAAAAAIAAAAEAAAAAQAAAPwAAAD/AAAAuwAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAABSAAAAzwAA
        APsAAAD/AAAA/wAAAO0AAACZAAAAFwAAAAAAAAACAAAA/AAAAP8AAAC7AAAAAAAAAAIAAAABAAAAAAAA
        AA4AAABHAAAARgAAAEYAAABGAAAARgAAAEUAAABKAAAAGQAAAAAAAAABAAAAAAAAAAIAAAAAAAAAiwAA
        AP8AAAD9AAAA/wAAAP8AAAD/AAAA/gAAAP8AAADlAAAAKwAAAAAAAAD8AAAA/wAAALsAAAAAAAAAAgAA
        AAMAAAAAAAAANQAAAP8AAAD+AAAA/wAAAP8AAAD/AAAA+wAAAP8AAABbAAAAAAAAAAQAAAADAAAAAAAA
        AGkAAAD/AAAA+gAAAP4AAAC7AAAAfwAAAJQAAADmAAAA/gAAAP8AAADTAAAADgAAAPwAAAD/AAAAuwAA
        AAAAAAACAAAAAwAAAAAAAAA1AAAA/wAAAP4AAAD/AAAA/wAAAP8AAAD7AAAA/wAAAFsAAAAAAAAABQAA
        AAAAAAAPAAAA4wAAAP8AAAD+AAAAXwAAAAAAAAADAAAAAAAAABAAAADCAAAA/wAAAP8AAACAAAAA/AAA
        AP8AAAC7AAAAAAAAAAIAAAABAAAAAAAAABkAAAB8AAAAeQAAAHkAAAB5AAAAeQAAAHgAAACBAAAAKwAA
        AAAAAAAFAAAAAAAAAE8AAAD/AAAA/wAAAJoAAAAAAAAABQAAAAUAAAAGAAAAAAAAACcAAAD3AAAA/wAA
        ANYAAAD8AAAA/wAAALsAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAAAAAAAdwAAAP8AAAD/AAAATQAAAAAAAAAEAAAAAAAAAAAAAAADAAAAAAAA
        AMUAAAD/AAAA9gAAAPwAAAD/AAAAuwAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAB3AAAA/wAAAP8AAABNAAAAAAAAAAQAAAAAAAAAAAAA
        AAMAAAAAAAAAxQAAAP8AAAD2AAAA/AAAAP8AAAC7AAAAAAAAAAIAAAABAAAAAAAAABkAAAB8AAAAeQAA
        AHkAAAB5AAAAeQAAAHgAAACBAAAAKwAAAAAAAAAFAAAAAAAAAE8AAAD/AAAA/wAAAJoAAAAAAAAABQAA
        AAUAAAAGAAAAAAAAACcAAAD2AAAA/wAAANYAAAD8AAAA/wAAALsAAAAAAAAAAgAAAAMAAAAAAAAANQAA
        AP8AAAD+AAAA/wAAAP8AAAD/AAAA+wAAAP8AAABbAAAAAAAAAAUAAAAAAAAADwAAAOMAAAD/AAAA/gAA
        AF8AAAAAAAAAAwAAAAAAAAAQAAAAwgAAAP8AAAD/AAAAgAAAAPwAAAD/AAAAuwAAAAAAAAACAAAAAwAA
        AAAAAAA1AAAA/wAAAP4AAAD/AAAA/wAAAP8AAAD7AAAA/wAAAFsAAAAAAAAABAAAAAMAAAAAAAAAagAA
        AP8AAAD6AAAA/gAAALsAAAB/AAAAkwAAAOUAAAD/AAAA/wAAANMAAAAOAAAA/AAAAP8AAAC7AAAAAAAA
        AAIAAAABAAAAAAAAAA4AAABHAAAARgAAAEYAAABGAAAARgAAAEUAAABKAAAAGQAAAAAAAAABAAAAAAAA
        AAIAAAAAAAAAiwAAAP8AAAD9AAAA/wAAAP8AAAD/AAAA/gAAAP8AAADlAAAAKwAAAAAAAAD8AAAA/wAA
        ALsAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAMAAAAAAAAAUgAAAM8AAAD7AAAA/wAAAP8AAADuAAAAmQAAABcAAAAAAAAAAgAA
        APwAAAD/AAAAuwAAAAAAAAACAAAAAAAAAAAAAAABAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAgAAACUAAABBAAAANwAAABEAAAAAAAAAAgAA
        AAIAAAAAAAAA/AAAAP8AAAC7AAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAACAAAAAAAAAAAAAAD8AAAA/wAAALsAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAA
        AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAPwAAAD/AAAAuwAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAAAP8AAAC7AAAAAAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AAAA/wAAALwAAAAAAAAABQAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAA
        AAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAABAAAAAAAAAPwAAAD/AAAAuwAA
        AAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/gAA
        AP8AAADtAAAAuAAAALwAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAA
        ALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALsAAAC7AAAAuwAAALgAAADJAAAAcwAA
        AAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAA
        AP8AAACdAAAAAAAAAP8AAAD/AAAA/gAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAA
        APwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAA
        APwAAAD4AAAA/wAAAJsAAAAAAAAAAAAAAAAAAAAAE///yBAAAAgQAAAIE///yBP/+ggT/+iyEgCSCBP/
        5AISAIgBEgCQABIAoKASAKEQE/+hSBP/oUgSAKEQEgCgoBIAkAASAIgBE//kAhIAkgkT/+iyE//6BRP/
        //8QAAABEAAAARP///8AAAABAAAAAQAAAAE=
</value>
  </data>
</root>